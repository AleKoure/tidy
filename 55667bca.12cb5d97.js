(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{76:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return u})),t.d(a,"metadata",(function(){return l})),t.d(a,"toc",(function(){return o})),t.d(a,"default",(function(){return i}));var n=t(3),r=t(7),c=(t(0),t(97)),u={title:"Summarizer API",sidebar_label:"Summarizers"},l={unversionedId:"api/summary",id:"api/summary",isDocsHomePage:!1,title:"Summarizer API",description:"Aggregation functions that given a collection of items produce a single value.",source:"@site/docs/api/summary.md",slug:"/api/summary",permalink:"/tidy/docs/api/summary",editUrl:"https://github.com/pbeshai/tidy/docs/api/summary.md",version:"current",lastUpdatedBy:"Noah Veltman",lastUpdatedAt:1612392782,sidebar_label:"Summarizers",sidebar:"docs",previous:{title:"groupBy API",permalink:"/tidy/docs/api/groupby"},next:{title:"Vector Function API",permalink:"/tidy/docs/api/vector"}},o=[{value:"deviation",id:"deviation",children:[{value:"Parameters",id:"parameters",children:[]},{value:"Usage",id:"usage",children:[]}]},{value:"first",id:"first",children:[{value:"Parameters",id:"parameters-1",children:[]},{value:"Usage",id:"usage-1",children:[]}]},{value:"last",id:"last",children:[{value:"Parameters",id:"parameters-2",children:[]},{value:"Usage",id:"usage-2",children:[]}]},{value:"max",id:"max",children:[{value:"Parameters",id:"parameters-3",children:[]},{value:"Usage",id:"usage-3",children:[]}]},{value:"mean",id:"mean",children:[{value:"Parameters",id:"parameters-4",children:[]},{value:"Usage",id:"usage-4",children:[]}]},{value:"meanRate",id:"meanrate",children:[{value:"Parameters",id:"parameters-5",children:[]},{value:"Usage",id:"usage-5",children:[]}]},{value:"median",id:"median",children:[{value:"Parameters",id:"parameters-6",children:[]},{value:"Usage",id:"usage-6",children:[]}]},{value:"min",id:"min",children:[{value:"Parameters",id:"parameters-7",children:[]},{value:"Usage",id:"usage-7",children:[]}]},{value:"n",id:"n",children:[{value:"Usage",id:"usage-8",children:[]}]},{value:"sum",id:"sum",children:[{value:"Parameters",id:"parameters-8",children:[]},{value:"Usage",id:"usage-9",children:[]}]},{value:"variance",id:"variance",children:[{value:"Parameters",id:"parameters-9",children:[]},{value:"Usage",id:"usage-10",children:[]}]}],b={toc:o};function i(e){var a=e.components,t=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(n.a)({},b,t,{components:a,mdxType:"MDXLayout"}),Object(c.b)("p",null,"Aggregation functions that given a collection of items produce a single value."),Object(c.b)("h2",{id:"deviation"},"deviation"),Object(c.b)("p",null,"Computes the standard deviation as per ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/d3/d3-array#deviation"}),"d3-array::deviation"),"."),Object(c.b)("h3",{id:"parameters"},"Parameters"),Object(c.b)("h4",{id:"key"},Object(c.b)("inlineCode",{parentName:"h4"},"key")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"| string /* key of object */\n| (item: object) => number\n")),Object(c.b)("p",null,"Either the key to compute the value over or an accessor function that maps a given item to the value to compute over."),Object(c.b)("h3",{id:"usage"},"Usage"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const data = [\n  { str: 'foo', value: 3 },\n  { str: 'foo', value: 1 },\n  { str: 'bar', value: 3 },\n  { str: 'bar', value: 1 },\n  { str: 'bar', value: 7 },\n];\n\ntidy(data, summarize({\n  stdev: deviation('value'),\n})\n// output:\n[{ stdev: 2.449 }]\n")),Object(c.b)("hr",null),Object(c.b)("h2",{id:"first"},"first"),Object(c.b)("p",null,"Returns the value for the specified key from first item in the collection."),Object(c.b)("h3",{id:"parameters-1"},"Parameters"),Object(c.b)("h4",{id:"key-1"},Object(c.b)("inlineCode",{parentName:"h4"},"key")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"| string /* key of object */\n| (item: object) => number\n")),Object(c.b)("p",null,"Either the key to compute the value over or an accessor function that maps a given item to the value to compute over."),Object(c.b)("h3",{id:"usage-1"},"Usage"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const data = [\n  { str: 'foo', value: 3 },\n  { str: 'foo', value: 1 },\n  { str: 'bar', value: 3 },\n  { str: 'bar', value: 1 },\n  { str: 'bar', value: 7 },\n];\n\ntidy(data, summarize({\n  str: first('str'),\n  value: sum('value'),\n})\n// output:\n[{ str: 'foo', value: 15 }]\n")),Object(c.b)("hr",null),Object(c.b)("h2",{id:"last"},"last"),Object(c.b)("p",null,"Returns the value for the specified key from last item in the collection."),Object(c.b)("h3",{id:"parameters-2"},"Parameters"),Object(c.b)("h4",{id:"key-2"},Object(c.b)("inlineCode",{parentName:"h4"},"key")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"| string /* key of object */\n| (item: object) => number\n")),Object(c.b)("p",null,"Either the key to compute the value over or an accessor function that maps a given item to the value to compute over."),Object(c.b)("h3",{id:"usage-2"},"Usage"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const data = [\n  { str: 'foo', value: 3 },\n  { str: 'foo', value: 1 },\n  { str: 'bar', value: 3 },\n  { str: 'bar', value: 1 },\n  { str: 'bar', value: 7 },\n];\n\ntidy(data, summarize({\n  str: last('str'),\n  value: sum('value'),\n})\n// output:\n[{ str: 'bar', value: 15 }]\n")),Object(c.b)("hr",null),Object(c.b)("h2",{id:"max"},"max"),Object(c.b)("p",null,"Computes the max value as per ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/d3/d3-array#max"}),"d3-array::max"),"."),Object(c.b)("h3",{id:"parameters-3"},"Parameters"),Object(c.b)("h4",{id:"key-3"},Object(c.b)("inlineCode",{parentName:"h4"},"key")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"| string /* key of object */\n| (item: object) => number\n")),Object(c.b)("p",null,"Either the key to compute the value over or an accessor function that maps a given item to the value to compute over."),Object(c.b)("h3",{id:"usage-3"},"Usage"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const data = [\n  { str: 'foo', value: 3 },\n  { str: 'foo', value: 1 },\n  { str: 'bar', value: 3 },\n  { str: 'bar', value: 1 },\n  { str: 'bar', value: 7 },\n];\n\ntidy(data, summarize({\n  value: max('value'),\n})\n// output:\n[{ value: 7 }]\n")),Object(c.b)("hr",null),Object(c.b)("h2",{id:"mean"},"mean"),Object(c.b)("p",null,"Computes the mean value as per ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/d3/d3-array#mean"}),"d3-array::mean"),", using ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/d3/d3-array#fsum"}),"d3-array::fsum")," to reduce floating point errors."),Object(c.b)("h3",{id:"parameters-4"},"Parameters"),Object(c.b)("h4",{id:"key-4"},Object(c.b)("inlineCode",{parentName:"h4"},"key")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"| string /* key of object */\n| (item: object) => number\n")),Object(c.b)("p",null,"Either the key to compute the value over or an accessor function that maps a given item to the value to compute over."),Object(c.b)("h3",{id:"usage-4"},"Usage"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const data = [\n  { str: 'foo', value: 3 },\n  { str: 'foo', value: 1 },\n  { str: 'bar', value: 3 },\n  { str: 'bar', value: 1 },\n  { str: 'bar', value: 7 },\n];\n\ntidy(data, summarize({\n  value: mean('value'),\n})\n// output:\n[{ value: 3 }]\n")),Object(c.b)("hr",null),Object(c.b)("h2",{id:"meanrate"},"meanRate"),Object(c.b)("p",null,"Computes the mean for fractional values by summing over the numerator and denominator individually first before dividing."),Object(c.b)("h3",{id:"parameters-5"},"Parameters"),Object(c.b)("h4",{id:"numerator"},Object(c.b)("inlineCode",{parentName:"h4"},"numerator")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"| string /* key of object */\n| (item: object) => number\n")),Object(c.b)("p",null,"Either the key to compute the numerator over or an accessor function that maps a given item to the numerator value to compute over."),Object(c.b)("h4",{id:"denominator"},Object(c.b)("inlineCode",{parentName:"h4"},"denominator")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"| string /* key of object */\n| (item: object) => number\n")),Object(c.b)("p",null,"Either the key to compute the denominator over or an accessor function that maps a given item to the denominator value to compute over."),Object(c.b)("h3",{id:"usage-5"},"Usage"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const data = [\n  { str: 'foo', value: 3, value2: 4 },\n  { str: 'foo', value: 0, value2: 0 },\n  { str: 'bar', value: 0, value2: 3 },\n  { str: 'bar', value: 1, value2: 2 },\n  { str: 'bar', value: 7, value2: 10 },\n];\n\ntidy(data, summarize({\n  meanValue: meanRate('value', 'value2'),\n}))\n// output:\n[{ meanValue: 11 / 19 }]\n")),Object(c.b)("hr",null),Object(c.b)("h2",{id:"median"},"median"),Object(c.b)("p",null,"Computes the median value as per ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/d3/d3-array#median"}),"d3-array::median"),"."),Object(c.b)("h3",{id:"parameters-6"},"Parameters"),Object(c.b)("h4",{id:"key-5"},Object(c.b)("inlineCode",{parentName:"h4"},"key")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"| string /* key of object */\n| (item: object) => number\n")),Object(c.b)("p",null,"Either the key to compute the value over or an accessor function that maps a given item to the value to compute over."),Object(c.b)("h3",{id:"usage-6"},"Usage"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const data = [\n  { str: 'foo', value: 3 },\n  { str: 'foo', value: 1 },\n  { str: 'bar', value: 3 },\n  { str: 'bar', value: 1 },\n  { str: 'bar', value: 7 },\n];\n\ntidy(data, summarize({\n  value: median('value'),\n})\n// output:\n[{ value: 3 }]\n")),Object(c.b)("hr",null),Object(c.b)("h2",{id:"min"},"min"),Object(c.b)("p",null,"Computes the min value as per ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/d3/d3-array#min"}),"d3-array::min"),"."),Object(c.b)("h3",{id:"parameters-7"},"Parameters"),Object(c.b)("h4",{id:"key-6"},Object(c.b)("inlineCode",{parentName:"h4"},"key")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"| string /* key of object */\n| (item: object) => number\n")),Object(c.b)("p",null,"Either the key to compute the value over or an accessor function that maps a given item to the value to compute over."),Object(c.b)("h3",{id:"usage-7"},"Usage"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const data = [\n  { str: 'foo', value: 3 },\n  { str: 'foo', value: 1 },\n  { str: 'bar', value: 3 },\n  { str: 'bar', value: 1 },\n  { str: 'bar', value: 7 },\n];\n\ntidy(data, summarize({\n  value: min('value'),\n})\n// output:\n[{ value: 1 }]\n")),Object(c.b)("hr",null),Object(c.b)("h2",{id:"n"},"n"),Object(c.b)("p",null,"Computes the number of items in the collection."),Object(c.b)("h3",{id:"usage-8"},"Usage"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const data = [\n  { str: 'foo', value: 3 },\n  { str: 'foo', value: 1 },\n  { str: 'bar', value: 3 },\n  { str: 'bar', value: 1 },\n  { str: 'bar', value: 7 },\n];\n\ntidy(data, summarize({\n  count: n(),\n})\n// output:\n[{ count: 5 }]\n")),Object(c.b)("hr",null),Object(c.b)("h2",{id:"sum"},"sum"),Object(c.b)("p",null,"Computes the sum as per ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/d3/d3-array#fsum"}),"d3-array::fsum"),"."),Object(c.b)("h3",{id:"parameters-8"},"Parameters"),Object(c.b)("h4",{id:"key-7"},Object(c.b)("inlineCode",{parentName:"h4"},"key")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"| string /* key of object */\n| (item: object) => number\n")),Object(c.b)("p",null,"Either the key to compute the value over or an accessor function that maps a given item to the value to compute over."),Object(c.b)("h3",{id:"usage-9"},"Usage"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const data = [\n  { str: 'foo', value: 3 },\n  { str: 'foo', value: 1 },\n  { str: 'bar', value: 3 },\n  { str: 'bar', value: 1 },\n  { str: 'bar', value: 7 },\n];\n\ntidy(data, summarize({\n  value: sum('value'),\n})\n// output:\n[{ value: 15 }]\n")),Object(c.b)("hr",null),Object(c.b)("h2",{id:"variance"},"variance"),Object(c.b)("p",null,"Computes the variance as per ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/d3/d3-array#variance"}),"d3-array::variance"),"."),Object(c.b)("h3",{id:"parameters-9"},"Parameters"),Object(c.b)("h4",{id:"key-8"},Object(c.b)("inlineCode",{parentName:"h4"},"key")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"| string /* key of object */\n| (item: object) => number\n")),Object(c.b)("p",null,"Either the key to compute the value over or an accessor function that maps a given item to the value to compute over."),Object(c.b)("h3",{id:"usage-10"},"Usage"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const data = [\n  { str: 'foo', value: 3 },\n  { str: 'foo', value: 1 },\n  { str: 'bar', value: 3 },\n  { str: 'bar', value: 1 },\n  { str: 'bar', value: 7 },\n];\n\ntidy(data, summarize({\n  value: variance('value'),\n})\n// output:\n[{ value: 6 }]\n")),Object(c.b)("hr",null))}i.isMDXComponent=!0},97:function(e,a,t){"use strict";t.d(a,"a",(function(){return s})),t.d(a,"b",(function(){return d}));var n=t(0),r=t.n(n);function c(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function u(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?u(Object(t),!0).forEach((function(a){c(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):u(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},c=Object.keys(e);for(n=0;n<c.length;n++)t=c[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)t=c[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var b=r.a.createContext({}),i=function(e){var a=r.a.useContext(b),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},s=function(e){var a=i(e.components);return r.a.createElement(b.Provider,{value:a},e.children)},m={inlineCode:"code",wrapper:function(e){var a=e.children;return r.a.createElement(r.a.Fragment,{},a)}},p=r.a.forwardRef((function(e,a){var t=e.components,n=e.mdxType,c=e.originalType,u=e.parentName,b=o(e,["components","mdxType","originalType","parentName"]),s=i(t),p=n,d=s["".concat(u,".").concat(p)]||s[p]||m[p]||c;return t?r.a.createElement(d,l(l({ref:a},b),{},{components:t})):r.a.createElement(d,l({ref:a},b))}));function d(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var c=t.length,u=new Array(c);u[0]=p;var l={};for(var o in a)hasOwnProperty.call(a,o)&&(l[o]=a[o]);l.originalType=e,l.mdxType="string"==typeof e?e:n,u[1]=l;for(var b=2;b<c;b++)u[b]=t[b];return r.a.createElement.apply(null,u)}return r.a.createElement.apply(null,t)}p.displayName="MDXCreateElement"}}]);