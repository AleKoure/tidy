(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{85:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return i})),a.d(t,"toc",(function(){return b})),a.d(t,"default",(function(){return l}));var n=a(3),r=a(7),s=(a(0),a(97)),c={title:"Selectors API",sidebar_label:"Selectors"},i={unversionedId:"api/selectors",id:"api/selectors",isDocsHomePage:!1,title:"Selectors API",description:"A collection of helper functions to get a subset of keys for a set of objects. Typically used by select.",source:"@site/docs/api/selectors.md",slug:"/api/selectors",permalink:"/tidy/docs/api/selectors",editUrl:"https://github.com/pbeshai/tidy/docs/api/selectors.md",version:"current",lastUpdatedBy:"Peter Beshai",lastUpdatedAt:1612282937,sidebar_label:"Selectors",sidebar:"docs",previous:{title:"Sequence API",permalink:"/tidy/docs/api/sequences"},next:{title:"Pivot API",permalink:"/tidy/docs/api/pivot"}},b=[{value:"contains",id:"contains",children:[{value:"Parameters",id:"parameters",children:[]},{value:"Usage",id:"usage",children:[]}]},{value:"endsWith",id:"endswith",children:[{value:"Parameters",id:"parameters-1",children:[]},{value:"Usage",id:"usage-1",children:[]}]},{value:"everything",id:"everything",children:[{value:"Usage",id:"usage-2",children:[]}]},{value:"matches",id:"matches",children:[{value:"Parameters",id:"parameters-2",children:[]},{value:"Usage",id:"usage-3",children:[]}]},{value:"negate",id:"negate",children:[{value:"Parameters",id:"parameters-3",children:[]},{value:"Usage",id:"usage-4",children:[]}]},{value:"numRange",id:"numrange",children:[{value:"Parameters",id:"parameters-4",children:[]},{value:"Usage",id:"usage-5",children:[]}]},{value:"startsWith",id:"startswith",children:[{value:"Parameters",id:"parameters-5",children:[]},{value:"Usage",id:"usage-6",children:[]}]}],o={toc:b};function l(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(s.b)("wrapper",Object(n.a)({},o,a,{components:t,mdxType:"MDXLayout"}),Object(s.b)("p",null,"A collection of helper functions to get a subset of keys for a set of objects. Typically used by ",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"/tidy/docs/api/tidy#select--pick"}),Object(s.b)("strong",{parentName:"a"},"select")),"."),Object(s.b)("h2",{id:"contains"},"contains"),Object(s.b)("p",null,"Returns all keys that contain the specified substring."),Object(s.b)("h3",{id:"parameters"},"Parameters"),Object(s.b)("h4",{id:"substring"},Object(s.b)("inlineCode",{parentName:"h4"},"substring")),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"string\n")),Object(s.b)("p",null,"The substring that must exist in the keys."),Object(s.b)("h4",{id:"ignorecase"},Object(s.b)("inlineCode",{parentName:"h4"},"ignoreCase")),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"boolean = true\n")),Object(s.b)("p",null,"If true, matches without considering whether letters are upper or lower case (default: true)."),Object(s.b)("h3",{id:"usage"},"Usage"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const data = [\n  { foo: 1, bar: 20, foobar: 300, FoObAR: 90 },\n];\n\ntidy(data, select([contains('oba')]))\n// output:\n[{ foobar: 300, FoObAR: 90 }]\n\ntidy(data, select([contains('oba', false)]))\n// output:\n[{ foobar: 300 }]\n")),Object(s.b)("hr",null),Object(s.b)("h2",{id:"endswith"},"endsWith"),Object(s.b)("p",null,"Returns all keys that end with the specified substring."),Object(s.b)("h3",{id:"parameters-1"},"Parameters"),Object(s.b)("h4",{id:"suffix"},Object(s.b)("inlineCode",{parentName:"h4"},"suffix")),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"string\n")),Object(s.b)("p",null,"The suffix that must exist in the keys."),Object(s.b)("h4",{id:"ignorecase-1"},Object(s.b)("inlineCode",{parentName:"h4"},"ignoreCase")),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"boolean = true\n")),Object(s.b)("p",null,"If true, matches without considering whether letters are upper or lower case (default: true)."),Object(s.b)("h3",{id:"usage-1"},"Usage"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const data = [\n  { foo: 1, bar: 20, foobar: 300, FoObAR: 90 },\n];\n\ntidy(data, select([endsWith('bAR')]))\n// output:\n[{ foobar: 300, FoObAR: 90 }]\n\ntidy(data, select([endsWith('bAR', false)]))\n// output:\n[{ FoObAR: 90 }]\n")),Object(s.b)("hr",null),Object(s.b)("h2",{id:"everything"},"everything"),Object(s.b)("p",null,"Returns all keys for items in the collection. It is naive and looks only at the first element in the collection."),Object(s.b)("h3",{id:"usage-2"},"Usage"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const data = [\n  { foo: 1, bar: 20, foobar: 300, FoObAR: 90 },\n];\n\ntidy(data, select(['foobar', everything(), '-FoObAR']))\n// output:\n[{ foobar: 300, foo: 1, bar: 20 }]\n")),Object(s.b)("hr",null),Object(s.b)("h2",{id:"matches"},"matches"),Object(s.b)("p",null,"Returns all keys that start with the specified substring."),Object(s.b)("h3",{id:"parameters-2"},"Parameters"),Object(s.b)("h4",{id:"regex"},Object(s.b)("inlineCode",{parentName:"h4"},"regex")),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"RegExp\n")),Object(s.b)("p",null,"The regular expression used to match keys against. You must provide the ",Object(s.b)("inlineCode",{parentName:"p"},"i")," flag to have case ignored."),Object(s.b)("h3",{id:"usage-3"},"Usage"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const data = [\n  { foo: 1, bar: 20, foobar: 300, FoObAR: 90 },\n];\n\ntidy(data, select([matches(/oba/i)]))\n// output:\n[{ foobar: 300, FoObAR: 90 }]\n\ntidy(data, select([matches(/oba/)]))\n// output:\n[{ foobar: 300 }]\n")),Object(s.b)("h2",{id:"negate"},"negate"),Object(s.b)("p",null,"Converts the output of any given selector(s) to be prefixed with ",Object(s.b)("inlineCode",{parentName:"p"},"-"),", so when combined with select, those keys are dropped."),Object(s.b)("h3",{id:"parameters-3"},"Parameters"),Object(s.b)("h4",{id:"selectors"},Object(s.b)("inlineCode",{parentName:"h4"},"selectors")),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"| string /* keys in the object */  \n| (items: T[]) => string[] /* selector functions */\n| (string | (items: T[]) => string[])[]\n")),Object(s.b)("p",null,"Single or array of selector keys or functions."),Object(s.b)("h3",{id:"usage-4"},"Usage"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const data = [{\n  date: '2021-01-01',\n  test_bigint: 123,\n  test: 12,\n  foo_bigint: 99,\n  bar: 13,\n}];\n\ntidy(data, \n  select([negate(endsWith('_bigint')), '-date']))\n// output:\n[{ test: 12, bar: 13 }]\n\n// same as:\ntidy(data, \n  select(['-test_bigint', '-foo_bigint', '-date']))\n")),Object(s.b)("hr",null),Object(s.b)("h2",{id:"numrange"},"numRange"),Object(s.b)("p",null,"Returns all keys that start with the specified substring combined with a numerical suffix within a specified range."),Object(s.b)("h3",{id:"parameters-4"},"Parameters"),Object(s.b)("h4",{id:"prefix"},Object(s.b)("inlineCode",{parentName:"h4"},"prefix")),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"string\n")),Object(s.b)("p",null,"The prefix for the keys that will have the numbers appended to."),Object(s.b)("h4",{id:"range"},Object(s.b)("inlineCode",{parentName:"h4"},"range")),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"[number, number]\n")),Object(s.b)("p",null,"The ",Object(s.b)("inlineCode",{parentName:"p"},"[min, max]")," numbers to generate the keys over."),Object(s.b)("h4",{id:"width"},Object(s.b)("inlineCode",{parentName:"h4"},"width?")),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"number | undefined\n")),Object(s.b)("p",null,"How many leading zeroes the numbers should have, defaults to none. "),Object(s.b)("h3",{id:"usage-5"},"Usage"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const data = [\n  { foo07: 1, foo08: 20, foo10: 300, foo11: 90, foo12: 12, bar08: 8, foo: 1 },\n];\n\ntidy(data, select([numRange('foo', [8, 11], 2)]))\n// output:\n[{ foo08: 20, foo10: 300, foo11: 90 }]\n")),Object(s.b)("hr",null),Object(s.b)("h2",{id:"startswith"},"startsWith"),Object(s.b)("p",null,"Returns all keys that start with the specified substring."),Object(s.b)("h3",{id:"parameters-5"},"Parameters"),Object(s.b)("h4",{id:"prefix-1"},Object(s.b)("inlineCode",{parentName:"h4"},"prefix")),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"string\n")),Object(s.b)("p",null,"The prefix that must exist in the keys."),Object(s.b)("h4",{id:"ignorecase-2"},Object(s.b)("inlineCode",{parentName:"h4"},"ignoreCase")),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"boolean = true\n")),Object(s.b)("p",null,"If true, matches without considering whether letters are upper or lower case (default: true)."),Object(s.b)("h3",{id:"usage-6"},"Usage"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const data = [\n  { foo: 1, bar: 20, foobar: 300, FoObAR: 90 },\n];\n\ntidy(data, select([startsWith('bAR')]))\n// output:\n[{ foobar: 300, FoObAR: 90 }]\n\ntidy(data, select([startsWith('bAR', false)]))\n// output:\n[{ FoObAR: 90 }]\n")),Object(s.b)("hr",null))}l.isMDXComponent=!0},97:function(e,t,a){"use strict";a.d(t,"a",(function(){return u})),a.d(t,"b",(function(){return h}));var n=a(0),r=a.n(n);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function c(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?c(Object(a),!0).forEach((function(t){s(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function b(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=r.a.createContext({}),l=function(e){var t=r.a.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=l(e.components);return r.a.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},p=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,s=e.originalType,c=e.parentName,o=b(e,["components","mdxType","originalType","parentName"]),u=l(a),p=n,h=u["".concat(c,".").concat(p)]||u[p]||d[p]||s;return a?r.a.createElement(h,i(i({ref:t},o),{},{components:a})):r.a.createElement(h,i({ref:t},o))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=a.length,c=new Array(s);c[0]=p;var i={};for(var b in t)hasOwnProperty.call(t,b)&&(i[b]=t[b]);i.originalType=e,i.mdxType="string"==typeof e?e:n,c[1]=i;for(var o=2;o<s;o++)c[o]=a[o];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,a)}p.displayName="MDXCreateElement"}}]);